{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Pick_Objection.ModelObject_User_.Exclude_keyofObjection.ModelObject_User_.createdSubreddits-or-subscriptions-or-posts-or-comments-or-postVotes-or-commentVotes__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"image": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"email",
					"name",
					"username",
					"password"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Objection.ModelObject_User_.createdSubreddits-or-subscriptions-or-posts-or-comments-or-postVotes-or-commentVotes_": {
				"$ref": "#/components/schemas/Pick_Objection.ModelObject_User_.Exclude_keyofObjection.ModelObject_User_.createdSubreddits-or-subscriptions-or-posts-or-comments-or-postVotes-or-commentVotes__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UserSchema": {
				"$ref": "#/components/schemas/Omit_Objection.ModelObject_User_.createdSubreddits-or-subscriptions-or-posts-or-comments-or-postVotes-or-commentVotes_"
			},
			"Pick_UserSchema.Exclude_keyofUserSchema.password__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"image": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"email",
					"name",
					"username"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_UserSchema.password_": {
				"$ref": "#/components/schemas/Pick_UserSchema.Exclude_keyofUserSchema.password__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UserLoginResponseSchema": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Omit_UserSchema.password_"
					},
					{
						"properties": {
							"token": {
								"type": "string"
							}
						},
						"required": [
							"token"
						],
						"type": "object"
					}
				]
			},
			"UserRegisterResponseSchema": {
				"$ref": "#/components/schemas/UserLoginResponseSchema"
			},
			"Pick_UserSchema.Exclude_keyofUserSchema.id__": {
				"properties": {
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"image": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"name",
					"username",
					"password"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_UserSchema.id_": {
				"$ref": "#/components/schemas/Pick_UserSchema.Exclude_keyofUserSchema.id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UserRegisterSchema": {
				"$ref": "#/components/schemas/Omit_UserSchema.id_"
			},
			"Pick_UserSchema.email-or-password_": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"UserLoginSchema": {
				"$ref": "#/components/schemas/Pick_UserSchema.email-or-password_"
			},
			"Pick_any.Objection.DataPropertyNames_any__": {
				"properties": {},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Objection.ModelObject_any_": {
				"$ref": "#/components/schemas/Pick_any.Objection.DataPropertyNames_any__",
				"description": "A Pojo version of model."
			},
			"User": {
				"$ref": "#/components/schemas/Objection.ModelObject_any_"
			},
			"SubReddit": {
				"$ref": "#/components/schemas/Objection.ModelObject_any_"
			},
			"PostVote": {
				"$ref": "#/components/schemas/Objection.ModelObject_any_"
			},
			"Pick_Post.Objection.DataPropertyNames_Post__": {
				"properties": {
					"id": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"content": {
						"additionalProperties": false,
						"type": "object"
					},
					"createdAt": {
						"type": "string"
					},
					"updatedAt": {
						"type": "string"
					},
					"authorId": {
						"type": "string"
					},
					"author": {
						"$ref": "#/components/schemas/User"
					},
					"subredditId": {
						"type": "string"
					},
					"subreddit": {
						"$ref": "#/components/schemas/SubReddit"
					},
					"PostVotes": {
						"items": {
							"$ref": "#/components/schemas/PostVote"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"title"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Objection.ModelObject_Post_": {
				"$ref": "#/components/schemas/Pick_Post.Objection.DataPropertyNames_Post__",
				"description": "A Pojo version of model."
			},
			"PostSchema": {
				"$ref": "#/components/schemas/Objection.ModelObject_Post_"
			},
			"Pick_PostSchema.Exclude_keyofPostSchema.id-or-createdAt-or-updatedAt__": {
				"properties": {
					"title": {
						"type": "string"
					},
					"content": {
						"additionalProperties": false,
						"type": "object"
					},
					"authorId": {
						"type": "string"
					},
					"author": {
						"$ref": "#/components/schemas/User"
					},
					"subredditId": {
						"type": "string"
					},
					"subreddit": {
						"$ref": "#/components/schemas/SubReddit"
					},
					"PostVotes": {
						"items": {
							"$ref": "#/components/schemas/PostVote"
						},
						"type": "array"
					}
				},
				"required": [
					"title"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_PostSchema.id-or-createdAt-or-updatedAt_": {
				"$ref": "#/components/schemas/Pick_PostSchema.Exclude_keyofPostSchema.id-or-createdAt-or-updatedAt__",
				"description": "Construct a type with the properties of T except for those in type K."
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "reddit-clone-api",
		"version": "1.0.0",
		"description": "A Reddit clone",
		"license": {
			"name": "ISC"
		},
		"contact": {}
	},
	"paths": {
		"/api/v1/users/{userId}": {
			"get": {
				"operationId": "GetUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/UserSchema"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/v1/users": {
			"get": {
				"operationId": "GetAllUsers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"items": {
												"$ref": "#/components/schemas/UserSchema"
											},
											"type": "array"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/v1/users/register": {
			"post": {
				"operationId": "CreateUser",
				"responses": {
					"201": {
						"description": "User registered successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/UserRegisterResponseSchema"
										},
										{
											"type": "string"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserRegisterSchema"
							}
						}
					}
				}
			}
		},
		"/api/v1/users/login": {
			"post": {
				"operationId": "LoginUser",
				"responses": {
					"201": {
						"description": "User logged in successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/UserLoginResponseSchema"
										},
										{
											"type": "string"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserLoginSchema"
							}
						}
					}
				}
			}
		},
		"/api/v1/posts/{postId}": {
			"get": {
				"operationId": "GetPost",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/PostSchema"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Posts"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "postId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/v1/posts": {
			"get": {
				"operationId": "GetAllPosts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"items": {
												"$ref": "#/components/schemas/PostSchema"
											},
											"type": "array"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Posts"
				],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "CreatePost",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"type": "string"
										},
										{
											"$ref": "#/components/schemas/PostSchema"
										}
									]
								}
							}
						}
					}
				},
				"tags": [
					"Posts"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_PostSchema.id-or-createdAt-or-updatedAt_"
							}
						}
					}
				}
			}
		},
		"/healthCheck": {
			"get": {
				"operationId": "GetHealth",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"tags": [
					"HealthCheck"
				],
				"security": [],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}